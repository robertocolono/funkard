generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  passwordHash     String
  handle           String       @unique
  nome             String
  paese            String
  tipoUtente       UserType     @default(PRIVATO)
  indirizzo        String?
  citta            String?
  cap              String?
  telefono         String?
  metodoPagamento  String?
  accettaTermini   Boolean      @default(false)
  verified         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  products         Product[]
  userCards        UserCard[]
}

model Product {
  id           String         @id @default(cuid())
  title        String
  type         ProductType
  tcg          String
  setName      String?
  releaseYear  Int?
  rarity       String?
  edition      String?
  isSealed     Boolean
  condition    Condition?
  priceEUR     Int
  quantity     Int
  imageUrl     String
  description  String?
  metadata     Json?
  sellerId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  priceHistory PriceHistory[]
  seller       User           @relation(fields: [sellerId], references: [id])

  @@index([type, priceEUR])
  @@index([tcg, setName])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  date      DateTime @default(now())
  priceEUR  Int
  source    String?
  note      String?
  product   Product  @relation(fields: [productId], references: [id])
}

enum ProductType {
  SINGLE
  BOOSTER
  BOX
  ETB
  TIN
  DECK
  COLLECTION
  ACCESSORY
  PROMO
}

enum Condition {
  MINT
  NEAR_MINT
  LIGHT_PLAYED
  PLAYED
  POOR
}

enum UserType {
  PRIVATO
  BUSINESS
}

model Card {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
}

model UserCard {
  id             String   @id @default(cuid())
  userId         String
  name           String
  setName        String? // nuovo: nome set / espansione facoltativo
  condition      String?
  estimatedValue Float?
  type           CardType    @default(RAW)
  source         CardSource  @default(MANUAL)
  frontImage     String?
  backImage      String?
  // immagini RAW extra
  cornerTopLeft     String?
  cornerTopRight    String?
  cornerBottomLeft  String?
  cornerBottomRight String?
  edgeLeft          String?
  edgeRight         String?
  edgeTop           String?
  edgeBottom        String?
  // grading / AI
  gradeValue      Float?
  gradeLabel      String?
  gradeConfidence Float?
  gradeReportUrl  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

enum CardType {
  RAW
  GRADED
}

enum CardSource {
  MANUAL
  PURCHASE
  GRADELENS
}
